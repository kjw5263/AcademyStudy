/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-16 05:12:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.Connection;
import com.itwillbs.member.MemberBean;

public final class updatePro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.itwillbs.member.MemberBean");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>WebContent/member/updatePro.jsp</h1>\r\n");
      out.write("\r\n");

	// 로그인 세션
	String id = (String)session.getAttribute("id");
	if(id == null ){
		System.out.println("[updatePro.jsp] 로그인 세션 만료 ");
		// 참고로 한페이지에 sendRedirect는 하나만 있어야한다
		response.sendRedirect("loginForm.jsp");
	}

	// 한글처리
	request.setCharacterEncoding("UTF-8");
	
	// 전달되는 정보 (파라미터)를 저장 -> 액션태그 사용 자바빈 객체에 저장
	// MemberBean 객체 사용
	
      out.write("\r\n");
      out.write("\t\t");
      com.itwillbs.member.MemberBean mb = null;
      mb = (com.itwillbs.member.MemberBean) _jspx_page_context.getAttribute("mb", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (mb == null){
        mb = new com.itwillbs.member.MemberBean();
        _jspx_page_context.setAttribute("mb", mb, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("mb"), request);
      out.write('\r');
      out.write('\n');
      out.write('	');

	
	System.out.println("전달된 수정할 정보 : " + mb);
	

	
	
	// DB접속 후 -> 정보 확인하고 나서 데이터 수정
	final String DRIVER = "com.mysql.jdbc.Driver";
	final String DBURL = "jdbc:mysql://localhost:3306/jspdb";
	final String DBID = "root";
	final String DBPW = "1234";
	
	Class.forName(DRIVER);
	Connection conn = DriverManager.getConnection(DBURL, DBID, DBPW);
	
	// 데이터를 수정할 거지만, 웬만하면 바로 수정을 안하는 것이 좋다 ! 
	// =====> DB 본인여부 확인 후 수정 여부를 결정
	String sql = "select * from itwill_member where id=?";
	
	PreparedStatement pstmt = conn.prepareStatement(sql);
	pstmt.setString(1, mb.getId());
	ResultSet rs = pstmt.executeQuery();
	
	// 데이터 처리
	if(rs.next()){
		// 아이디에 해당하는 정보 있을 때
		if(mb.getPw().equals(rs.getString("pw"))){
			// 비밀번호까지 맞는 경우 : 수정 (비밀번호가 일치하는지까지 확인하여 본인여부 확인하기)	
			// DB연결까지 다 해놨으므로, sql (update) 만들고, pstmt객체 만들어서 실행하면돼
			sql = "update itwill_member set name=?, age=?, gender=?, email=? where id=?";
			pstmt = conn.prepareStatement(sql);	// sql문 하나당 pstmt 하나
			
			pstmt.setString(1, mb.getName());
			pstmt.setInt(2, mb.getAge());
			pstmt.setString(3, mb.getGender());
			pstmt.setString(4, mb.getEmail());
			pstmt.setString(5, mb.getId());
			
			pstmt.executeUpdate();
			
			System.out.println("회원 정보 수정 완료 !");
			// 페이지 이동
			response.sendRedirect("main.jsp");
		} else {
			// 비밀번호 틀리게 친 경우 => 오류 (페이지 뒤로 이동)
			
		}
	} else {
		// 아이디에 해당하는 정보 없을 때 => 오류 (페이지 뒤로 이동)
		
      out.write("\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\talert(\"아이디없음\");\r\n");
      out.write("\t\t\thistory.back();\r\n");
      out.write("\t\t</script>\t\t\t\t\r\n");
      out.write("\t\t");


	}
	
	
	// 정상적인 수정 후 -> main.jsp 페이지 이동
	// 문제 발생 시 페이지 뒤로가기
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
