import java.util.Date;		// 

/*
	메소드 오버로딩?
	
	오버로딩? : 이미 존재하는 이름을 다시 동일한 이름으로 재정의 한다는 의미
	
	메소드 오버로딩 : 동일한 이름의 메소드를 클래스 내부에 여러번 정의하는 것

	동일한 이름의 메소드를 여러번 정의(오버로딩) 가능한 이유?
	- 동일한 이름의 메소드가 호출되더라도, 전달 인자의 자료형이나 개수로
		해당 메소드를 구분해서 호출할 수 있기 때문


	메소드 오버로딩 규칙
	-> 동일한 이름의 메소드일지라도, 
		1. 메소드의 전달인자의 자료형이 달라야 한다.
		2. 메소드의 전달인자의 개수가 달라야한다.
		등이 달라야 한다.

*/
public class Test67 {

	public static void main(String[] args) {
		// 오버로딩된 메소드들 호출해보기
		// 이미 만들어져있는 것들!
		System.out.println(true);
		System.out.println('A');
		System.out.println("AAA");
		System.out.println(128);
		
		/*
			결론 : 화면 출력을 위한 메소드는 println() 하나인데
				메소드가 여러 출력 동작을 하고 있다..
				논리값, 문자, 정수, 실수, 문자열 등 여러 출력을 한다
		*/
		// println() 메소드가 여러 출력할 수 있는 이유?
		// -> 메소드 호출시 전달받는 인자의 자료형을 달리하여 메소드를 여러번 정의해놓았기 때문
		
		// 자바 API Document 문서에서
		// java.io.PrintStream.println 메소드를 찾아봅시다
		// println()
		// println(boolean b)
		// println(char a)
		// println(int i)
		// ...
		// 등등의 메소드들이 printStream클래스 내부에 메소드 오버로딩 되어있음
		////////////////////////////////////////////////////////////////////
		
		
		// 쉬어가기
		// System.out.println() 해석
		// 1. java.lang 패키지는 자바에서 기본으로 제공되는 패키지이기 때문에
		//  자동으로 사용가능하게 import (추가) 된다, lang 패키지만 그럼
		//  정확히 자바 컴파일러가 import 문을 추가해준다
		// 2. System클래스는 java.lang 패키지에 속해있는 클래스 이다.
		//    따라서 import문을 작성하지 않고 바로 사용할 수 있다
		//3. java.lang.System 클래스 내부에 존재하는
		//		PrintStream 클래스 타입의 out이라는 참조변수가 static 구문으로 선언되어있다
		// 이 out참조변수 내부에는 PrintStream객체의 주소가 저장되어 있다
		//  그러므로 PrintStream 객체가 가지고 있는 println() 메소드를 호출하여 사용하는 것
		
		new Date();
		
		
		
		
		
		
		
		
		
	}

}
