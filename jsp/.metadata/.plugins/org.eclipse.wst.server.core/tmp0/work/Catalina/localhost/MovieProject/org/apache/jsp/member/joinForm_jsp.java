/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-05-10 06:10:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class joinForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>마무다(MAMUDA) 회원가입</title>\r\n");
      out.write("<link href=\"../css/font.css\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700;800&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!--  다음 우편번호 API -->\r\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("<script src=\"../js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("function openAddrPop() {\r\n");
      out.write("    new daum.Postcode({\r\n");
      out.write("        oncomplete: function(data) {\r\n");
      out.write("            // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("            // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("            var fullAddr = ''; // 최종 주소 변수\r\n");
      out.write("            var extraAddr = ''; // 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("            // 사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("            if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("                fullAddr = data.roadAddress;\r\n");
      out.write("\r\n");
      out.write("            } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("                fullAddr = data.jibunAddress;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 사용자가 선택한 주소가 도로명 타입일때 조합한다.\r\n");
      out.write("            if(data.userSelectedType === 'R'){\r\n");
      out.write("                //법정동명이 있을 경우 추가한다.\r\n");
      out.write("                if(data.bname !== ''){\r\n");
      out.write("                    extraAddr += data.bname;\r\n");
      out.write("                }\r\n");
      out.write("                // 건물명이 있을 경우 추가한다.\r\n");
      out.write("                if(data.buildingName !== ''){\r\n");
      out.write("                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                }\r\n");
      out.write("                // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\r\n");
      out.write("                fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("            document.getElementById('zonecode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("            document.getElementById('addr').value = fullAddr;\r\n");
      out.write("\r\n");
      out.write("            // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("            document.getElementById('addr_detail').focus();\r\n");
      out.write("        }\r\n");
      out.write("    }).open();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 아이디 중복체크, 이메일 중복체크, 비밀번호 확인 여부 체크 -->\r\n");
      out.write("<script src=\"../js/joinCheck.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 회원가입 항목 입력 여부 체크 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("function submitCheck() {\r\n");
      out.write("\tvar pw1 = document.joinfr.user_pw.value;\r\n");
      out.write("\tvar pw2 = document.joinfr.user_pw_check.value;\r\n");
      out.write("\tif(document.joinfr.user_id.value == \"\"){\r\n");
      out.write("\t\talert(\"아이디는 필수입력 항목입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\tif(document.getElementById(\"user_id\").readOnly == false){\r\n");
      out.write("\t\talert(\"아이디 중복체크를 해주세요.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(pw1== \"\" || pw2==\"\"){\r\n");
      out.write("\t\talert(\"비밀번호는 필수입력 항목입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}else if(pw1 != pw2){\r\n");
      out.write("\t\talert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("\t} else if (pw1.indexOf(\" \") != -1){\r\n");
      out.write("\t\talert(\"비밀번호에 공백을 포함할 수 없습니다.\");\r\n");
      out.write("\t\tpw1.trim();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.joinfr.user_name.value == \"\"){\r\n");
      out.write("\t\talert(\"이름은 필수입력 항목입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.joinfr.user_email.value == \"\"){\r\n");
      out.write("\t\talert(\"이메일은 필수입력 항목입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tvar email = document.joinfr.user_email.value;\r\n");
      out.write("\t\t  \r\n");
      out.write("\t    if(email.indexOf(\"@\") == -1 || email.indexOf(\".\") == -1 ||email.indexOf(\"@\") < 5 || email.indexOf(\"@\")>email.indexOf(\".\")){\r\n");
      out.write("\t\t  alert(\"이메일 형식이 잘못되었습니다. example@mamuda.com 형식으로 입력하세요.\");\r\n");
      out.write("\t  \t  return false;\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.getElementById(\"user_email\").readOnly == false){\r\n");
      out.write("\t\talert(\"이메일 중복체크를 해주세요.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.getElementById(\"user_nickname\").value == \"\"){\r\n");
      out.write("\t\talert(\"닉네임은 필수입력 항목 입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.joinfr.zonecode.value == \"\" || document.joinfr.addr.value== \"\"|| document.joinfr.addr_detail.value == \"\" ){\r\n");
      out.write("\t\talert(\"주소는 필수입력 항목입니다.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<h2> 회원가입 </h2>\r\n");
      out.write("\t<form action=\"joinPro.jsp\" method=\"post\" name=\"joinfr\" onsubmit=\"return submitCheck()\">\r\n");
      out.write("<!-- \t<input type=\"hidden\" name=\"privacy_agree\" value=\"1\"> -->\r\n");
      out.write("\t<input type=\"text\" name=\"user_id\"  id=\"user_id\" placeholder=\"아이디\" >\r\n");
      out.write("\t<input type=\"button\" value=\"중복확인\" onclick=\"return IDdup_check()\"><br>\r\n");
      out.write("\t<input type=\"text\" name=\"user_name\" id=\"user_name\" placeholder=\"성명\"><br>\r\n");
      out.write("\t<input type=\"password\" name=\"user_pw\" id=\"user_pw\" placeholder=\"비밀번호\"><br>\r\n");
      out.write("\t<input type=\"password\" name=\"user_pw_check\" id=\"user_pw_check\" placeholder=\"비밀번호 확인\">\r\n");
      out.write("\t<div id=\"alert-passcheck\"></div>\r\n");
      out.write("\t<input type=\"text\" name=\"user_nickname\" id=\"user_nickname\" placeholder=\"닉네임\"><br>\r\n");
      out.write("\t<input type=\"text\" name=\"user_email\" id=\"user_email\" placeholder=\"이메일\">\r\n");
      out.write("\t<input type=\"button\" value=\"중복확인\" onclick=\"return EMdup_check()\"><br><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 다음 우편번호 api -->\r\n");
      out.write("\t<input type=\"text\" id=\"zonecode\" name=\"zonecode\" placeholder=\"우편번호\" readonly>\r\n");
      out.write("\t<input type=\"button\" id=\"addr_btn\" value=\"주소 찾기\" onclick=\"openAddrPop()\"> <br>\r\n");
      out.write("\t<input type=\"text\" id=\"addr\" name=\"addr\" placeholder=\"주소\" readonly> <br>\r\n");
      out.write("\t<input type=\"text\" id=\"addr_detail\" name=\"addr_detail\" placeholder=\"상세주소\"> <br><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 나중에 주의할 사항 : 로그인창에서 바로 회원가입 창으로 진입한경우 back() 하면 어떻게 되나? \r\n");
      out.write("\t\t-> 로그인  페이지로 이동 됨  -->\r\n");
      out.write("\t<input type=\"button\" value=\"취소\" onclick=\"history.back()\"> \r\n");
      out.write("\t<input type=\"submit\" value=\"가입하기\">\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
