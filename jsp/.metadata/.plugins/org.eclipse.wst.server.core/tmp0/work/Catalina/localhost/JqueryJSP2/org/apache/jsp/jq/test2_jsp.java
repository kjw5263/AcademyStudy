/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-06-24 07:45:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jq;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\talert(\"준비 시작\");\r\n");
      out.write("\t\r\n");
      out.write("\t// 선택자 : html 코드의 태그에 대한 접근\r\n");
      out.write("\t// '*' : 전체항목\r\n");
      out.write("\t$('*').css('color','blue');\r\n");
      out.write("\t// 태그 선택자 \r\n");
      out.write("\t$('h2').css('color', 'red');\r\n");
      out.write("\talert(\"준비 끝\");\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 아이디 선택자 - [태그명#아이디명], [#아이디명]\r\n");
      out.write("\t$(\"h2#title1\").css('color', 'orange');\r\n");
      out.write("\t\r\n");
      out.write("\t// 클래스 선택자- [태그명.클래스명], [.클래스명]\r\n");
      out.write("\t$(\"h2.title2\").css(\"color\", \"pink\");\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t/////////////////////////////////////////////\r\n");
      out.write("\t// >>>> 속성 탐색 선택자 <<<<\r\n");
      out.write("\t//$('input').val('홍길동');\r\n");
      out.write("\t//var tmp = $('input').val('홍길동');\r\n");
      out.write("\t//alert(tmp);\r\n");
      out.write("\t//console.log(tmp);\r\n");
      out.write("\t\r\n");
      out.write("\t$('input[type=text]').val('이름정보');\r\n");
      out.write("\t$('input[type=password]').val('12345');\r\n");
      out.write("\t// 태그[속성^=값] : 값으로 시작하는 태그(t로 시작하는 태그)\r\n");
      out.write("\t// 태그[속성$값] : 값으로 끝나는 태그\r\n");
      out.write("\t// 태그[속성~=값] : 값을 포함하는 태그(단어)\r\n");
      out.write("\t$('input[type^=t').val('이름정보^t');\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t//////////////////////////////////////////////////\r\n");
      out.write("\t// >>>>> 위치 탐색 선택자 <<<<<\r\n");
      out.write("\t// 태그:odd = 홀수 태그만 적용\r\n");
      out.write("\t// 태그:even = 짝수 태그만 적용 \r\n");
      out.write("\t// 태그:first = 첫번째 태그만 적용\r\n");
      out.write("\t// 태그:last = 마지막 태그만 적용\r\n");
      out.write("\t$(\"tr:odd\").css('background', 'lightblue');\r\n");
      out.write("\t$(\"tr:even\").css('background', 'lightgreen');\r\n");
      out.write("\t$(\"tr:first\").css('background', '#0096ff');\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h1>WebContent/jq/test2.jsp</h1>\r\n");
      out.write("\r\n");
      out.write("<h2 id=\"title1\">제목1</h2>\r\n");
      out.write("<h2 class=\"title2\">제목2</h2>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("아이디 : <input type=\"text\"> <br>\r\n");
      out.write("비밀번호: <input type=\"password\"> <br>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t <td>1</td>\r\n");
      out.write("\t <td>2</td>\r\n");
      out.write("\t <td>3</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t <td>1</td>\r\n");
      out.write("\t <td>2</td>\r\n");
      out.write("\t <td>3</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t <td>1</td>\r\n");
      out.write("\t <td>2</td>\r\n");
      out.write("\t <td>3</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t <td>1</td>\r\n");
      out.write("\t <td>2</td>\r\n");
      out.write("\t <td>3</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t <td>1</td>\r\n");
      out.write("\t <td>2</td>\r\n");
      out.write("\t <td>3</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
