/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-27 06:38:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.itwillbs.board.BoardBean;
import com.itwillbs.board.BoardDAO;

public final class updateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.itwillbs.board.BoardDAO");
    _jspx_imports_classes.add("com.itwillbs.board.BoardBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>1. writeForm.jsp </title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h1>WebContent/member/updateForm.jsp</h1>\r\n");
      out.write("\t<h2>게시판 수정하기</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// 전달 방식에 따라서 한글 처리 있으면 한글 처리 하기~(post방식)
		// updateForm.jsp?num=14&pageNum=1
		// 전달된 파라미터 있으면 저장하는게 가장 먼저!
		
		int num = Integer.parseInt(request.getParameter("num")); // 얘는 DB에 접근할것이기 때문에 int로 변환하는거고
		String pageNum = request.getParameter("pageNum"); // 이건 DB접근없기때문에 문자로 받아들여도 상관 ㄴㄴ
		
		// DB에서 글 번호에 해당하는 정보를 가져와서 출력
		
		BoardDAO bdao = new BoardDAO();
		BoardBean bb= bdao.getBoard(num);
		// bdao.getBoard(num).getNum();  (x, 메모리 낭비 심해서 사용권장 X)
		
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- DB에 처리해야하는 데이터 폼태그 안에 저장 (hidden)\r\n");
      out.write("\t\t DB에 처리 안하는 경우 주소줄에 저장 (url) \"\r\n");
      out.write("\t -->\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<form action=\"updatePro.jsp?num=");
      out.print(bb.getNum() );
      out.write("\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"num\" value=\"");
      out.print(bb.getNum() );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- pageNum은 DB에서 사용되지 않기 때문에 url로 보내고, num은 DB에 사용되므로 hidden으로 보낸다 -->\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 글쓴이는 수정하지 못하도록 readonly 속성 준다 -->\r\n");
      out.write("\t\t글쓴이 : <input type=\"text\" name=\"name\" value=\"");
      out.print(bb.getName());
      out.write("\" readonly> <br>\r\n");
      out.write("\t\t비밀번호 : <input type=\"password\" name=\"pass\" placeholder=\"비밀번호를 입력하세요.\"> <br>\r\n");
      out.write("\t\t제목 : <input type=\"text\" name=\"subject\" value=\"");
      out.print(bb.getSubject());
      out.write("\"> <br>\r\n");
      out.write("\t\t내용 : <textarea rows=\"20\" cols=\"80\" name=\"content\">");
      out.print(bb.getContent() );
      out.write("</textarea>\r\n");
      out.write("\t\t<!-- textArea에는 그..그 뭐야 value 속성이 들어갈 수 없다 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<input type=\"submit\" value=\"수정하기\">\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
