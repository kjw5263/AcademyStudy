/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-24 01:24:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		// 선언문 : 멤버변수, 멤버 메소드 선언 => JSP 페이지 어디서든 사용가능한 변수, 메소드
		// 선언문 선언 방식 : %! ~ %
		
		String name = "홍길동";
		
		public void method() {
			System.out.println("출력");	
		}
	
		// public void method2(); => 선언문 안에서 메소드 선언은 가능하지만, 호출은 불가
	
	

		// 선언문을 이렇게 나누어 작성해도, 위의 선언문과 합쳐져 하나의 선언문으로 인식됨
		int age = 20;	// 선언문 안이라면 -> 멤버변수
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h1> WebContent/jsp1/test1.jsp</h1>\r\n");
      out.write("\t<h2> JSP 기본 요소 </h2>\r\n");
      out.write("\t<h3> 1. 주석문 </h3>\r\n");
      out.write("\t<h3> 2. JSP 지시어 </h3>\r\n");
      out.write("\t<h3> 3. 스크립트 요소 </h3>\r\n");
      out.write("\t<h3> 4. 액션 태그 </h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- HTML 주석 -->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// JS 주석\r\n");
      out.write("\t\t/* JS 주석 */\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// java 주석
		/* java 주석 */
		/** java 주석 */
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// 2. JSP 지시어 (Directive) p.150~
		// < %@ 속성=값, 속성=값, ... ~ % > 로 만들어져 있는 형태.
		// < %@ page ~ % > : 페이지에 대한 설명
		// < %@ include ~ % > : 포함할 때 지시어 (액션태그)
		// < %@ taglib ~ % > : 태그를 새롭게 추가할 때 사용하는 지시어 (JSTL)
		// => 해당 파일에서 JSP 코드를 실행할 때, 어떤 방식으로 실행 할 건지 설명하는 코드
    	// https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types
		
    	
    	
    	// 3. 스크립트 요소 p.160~
		// => JSP 코드안에 java 코드를 사용가능하게 만드는 것
		// 3-1. 선언문 (Declare) : 멤버 변수, 멤버 메소드 선언
		// 3-2. 스크립틀릿 (Scriptlet)
		// 3-3. 표현식 (Expression)
		
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<h3> JSP - 선언문 </h3>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<h3> JSP - 스크립틀릿 </h3>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		// Java 코드를 작성할 수 있다.
		int num = 30;	// 지역변수
		method();		// 메소드 호출 가능 
	
	/*	public void method2() {
			이 구역 안에서는 메소드 선언 불가	
		}
	*/
	
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<h3> JSP - 표현식 </h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 내가 선언한 동작(메소드의 리턴, 변수, 리터럴 값을 사용\r\n");
      out.write("\t\tjava코드를 html 화면에 출력하고 싶다면 표현식 사용\r\n");
      out.write("\t -->\r\n");
      out.write("\t");
      out.print(1000	);
      out.write('	');
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(num );
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
