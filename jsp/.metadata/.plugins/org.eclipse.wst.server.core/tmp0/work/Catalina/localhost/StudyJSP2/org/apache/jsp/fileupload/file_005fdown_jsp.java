/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-05-04 07:35:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.fileupload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import java.io.FileInputStream;

public final class file_005fdown_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.io.FileInputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write(" <h1>WebContent/fileupload/file_down.jsp </h1>\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" <!-- 파일 다운로드 하려면? 1.서버에 저장된 파일 저장폴더를 접근해서, 2.파일을 찾아 꺼내와서, 3.화면에 download로 나타내주기 -->\r\n");
      out.write(" \r\n");
      out.write(" ");

 	// 파라미터값 저장 (filename)
 	String filename = request.getParameter("filename");
 
 	// 서버에 업로드 된 파일명생성 -> 실제 경로 필요해요
 	
 	// 업로드한 가상 경로
 	String savePath = "upload";
 	
 	// 파일이 업로드 된 경로
 	ServletContext ctx = getServletContext();
 	String sDownloadPath = ctx.getRealPath(savePath);
 	// 서블릿 컨텍스트가 뭔데? 쉽게말하면, 프로젝트 정보
 			
 			
 	System.out.println("upload 폴더의 실제 주소(서버 안에 있는 실제 주소 ) " + sDownloadPath);
 	
 	// 서버에 업로드된 파일명 생성
 	String sFilePath = sDownloadPath + "\\" + filename;
 	
 	System.out.println("다운로드할 파일 주소 : " + sFilePath);
 	
 	////////////////////////////////////////////////////
 	// * 자바/웹 파일을 업로드, 다운로드 시 파일의 확장자는 중요하지 않음
 	//	=> 스트림으로 데이터를 주고받기 때문에 => 해당 파일을 웹에서 표현하는 방식: MIME타입
 	
 	// 파일 업로드 
 	
 	// 파일을 한번에 읽고 쓰기 하는 배열 (버퍼)
 	byte[] b = new byte[4096];
 	
 	// 파일 입력 스트림 객체 ( 서버에 저장된 파일을 불러오기 )- 파일에 가져오는 것도 Input 
 	FileInputStream fis = new FileInputStream(sFilePath);
 	
 	// 다운로드할 파일의 MIME 타입을 가져오기
 	// * MIME 타입 : 클라이언트에게 전성된 문서의 다양성을 표현하기 위한 메커니즘
 	String sMimeType = getServletContext().getMimeType(sFilePath);
 	
 	//
 	System.out.println("sMimeType= >> " + sMimeType);
 	
 	
 	
 	// Mime 타입이 없을 경우 기본값으로 지정
 	if(sMimeType == null){
 		sMimeType = "application/octet-stream";
 	}
 	
 	
 	// 응답할 페이지에 MIME 타입을 지정 (jsp MIME 타입 -> 다운로드 파일 MIME 타입으로 변경)
 	response.setContentType(sMimeType);
 	
 	
 	///////////////// * 사용자의 브라우저를 확인 (IE 여부) /////////////////////////
 	// ie : 다운로드 시 한글파일의 이름이 깨짐, 공백문자가 "+" => 파일 처리
 	// 
 	
 	String agent = request.getHeader("User-Agent");
 	
 	System.out.println("사용자 정보 : " + agent);
 	
 	// 사용자 정보안에 "MSIE", "Trident" 둘 중 하나라도 있을 경우
 	boolean ieBrowser = (agent.indexOf("MSIE")>-1 || agent.indexOf("Trident")>-1);
 	
 	
 	// IE 브라우저 일때, 한글이 깨지므로 인코딩 해주기, 웹에서 공백 표시 (%20)
 	if(ieBrowser){
 		filename = URLEncoder.encode(filename, "UTF-8").replaceAll("\\+", "%20");  
 	} else {
 		// 모든 브라우저들 한글 깨짐 방지 (인코딩 방식 변경)
 		filename = new String(filename.getBytes("UTF-8"), "iso-8859-1");
 		
 	}
 	
 	
 	
 	
 	
 	///////////////////////////////////////////////////
 	// 모든 파일이 다운로드 형태로 처리되도록 설정
 	// => 브라우저에서 해석되는 파일도 다운로드처럼 처리하기 위한 설정
 	// "Content-Disposition", "attachment;" => 파일 다운로드 설정
 	response.setHeader("Content-Disposition", "attachment; filename= " + filename);
 	
 	
 	// 다운로드
 	ServletOutputStream out2 = response.getOutputStream();   // 여기는 jsp, out이라는 객체가 있어서중복!
 	
 	int numRead;
 	
 	
 	// -1은 파일의 끝 (입력의 끝 )
 	while((numRead = fis.read(b,0,b.length)) != -1) {
 		out2.write(b, 0, numRead);
 	}
 	out2.flush();	// 버퍼의 빈 공백을 채워서 데이터 전달하는 방법
 	out2.close();
 	fis.close();
 	
 	
 	
 	
 	
 	
 	
 	
 	
 
 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
