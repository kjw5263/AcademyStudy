/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-30 08:51:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.movie.boxOffice.DailyBoxOffice;
import java.util.List;
import com.movie.boxOffice.DailyTopTen;
import com.google.gson.Gson;
import java.util.HashMap;
import com.fasterxml.jackson.databind.ObjectMapper;
import kr.or.kobis.kobisopenapi.consumer.rest.KobisOpenAPIRestService;

public final class mAPI_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.movie.boxOffice.DailyTopTen");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("kr.or.kobis.kobisopenapi.consumer.rest.KobisOpenAPIRestService");
    _jspx_imports_classes.add("com.fasterxml.jackson.databind.ObjectMapper");
    _jspx_imports_classes.add("com.movie.boxOffice.DailyBoxOffice");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title></title>\r\n");
      out.write("<!-- \r\n");
      out.write("\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t/* 헤더 영역 : id속성값이(#) header인 아래쪽 <div> 태그 선언하여 스타일 적용 */\r\n");
      out.write("\t\t#header{\r\n");
      out.write("\t\t\tbackground-color : #78b563;\r\n");
      out.write("\t\t\theight : 200px;\r\n");
      out.write("\t\t\tmargin-bottom : 20px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* 네비 영역 */\r\n");
      out.write("\t\t#nav {\r\n");
      out.write("\t\t\tbackground-color : #eee;\r\n");
      out.write("\t\t\theight : 50px;\r\n");
      out.write("\t\t\tmargin-bottom : 20px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* content영역 */\r\n");
      out.write("\t\t#content {\r\n");
      out.write("\t\t\tbackground-color : #eee;\r\n");
      out.write("\t\t\tmargin-top : 30px;\r\n");
      out.write("\t\t\tmargin-bottom : 50px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* footer 영역 : 홈페이지 가장 하단 영역 - 회사 정보 등) */\r\n");
      out.write("\t\t#footer {\r\n");
      out.write("\t\t\tbackground-color : #96b58b;\r\n");
      out.write("\t\t\theight : 150px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t</style>\r\n");
      out.write(" -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write(" <div id=\"header\">header</div>\r\n");
      out.write(" \r\n");
      out.write(" <div id=\"nav\">nav</div>\r\n");
      out.write(" \r\n");
      out.write(" <div id=\"content\">\r\n");
      out.write(" \t<div class=\"section\">section</div>\r\n");
      out.write(" \t<div class=\"article\">article</div>\r\n");
      out.write(" \t<div class=\"aside\">aside</div>\r\n");
      out.write(" </div>\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" <div id=\"footer\"> footer</div>\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("\r\n");


	String targetDt = request.getParameter("targetDt")==null?"20120101":request.getParameter("targetDt");
	String itemPerPage = request.getParameter("itemPerPage")==null?"10":request.getParameter("itemPerPage");
	String multiMovieYn = request.getParameter("multiMovieYn")==null?"":request.getParameter("multiMovieYn");
	String repNationCd = request.getParameter("repNationCd")==null?"":request.getParameter("repNationCd");
	String wideAreaCd = request.getParameter("wideAreaCd")==null?"":request.getParameter("wideAreaCd");


	String key = "7ff8dbacefec6686b5f297822ffc7c5b";
	KobisOpenAPIRestService service = new KobisOpenAPIRestService(key);
	
	String dailyResponse = service.getDailyBoxOffice(true, targetDt, itemPerPage, multiMovieYn, repNationCd, wideAreaCd);

	Gson gsonDaily = new Gson();
	DailyTopTen dailytt = gsonDaily.fromJson(dailyResponse, DailyTopTen.class);
	
	for(int i=0; i<dailytt.getBoxOfficeResult().getDailyBoxOfficeList().size(); i++){
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");
      out.print(dailytt.getBoxOfficeResult().getDailyBoxOfficeList().get(i).getMovieNm() );
      out.write("<br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");

	}
		
	
	
	/* ObjectMapper mapper = new ObjectMapper();
	HashMap<String, Object> dailyResult = mapper.readValue(dailyResponse, HashMap.class);
	request.setAttribute("dailyResult", dailyResult);
	System.out.println("---------------------------------");
	System.out.println(request.getAttribute("dailyResult"));
	
	
	String codeResponse = service.getComCodeList(true, "0105000000");
	HashMap<String, Object> codeResult = mapper.readValue(codeResponse, HashMap.class);
	request.setAttribute("codeResult", codeResult);
	System.out.println("================================");
	System.out.println(request.getAttribute("codeResult"));
	 */
	
	
	
	

      out.write("\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
